-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Sample

local flatbuffers = require('flatbuffers')

local shareT = {} -- the module
local shareT_mt = {} -- the class metatable

function shareT.New()
    local o = {}
    setmetatable(o, {__index = shareT_mt})
    return o
end
function shareT.GetRootAsshareT(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = shareT.New()
    o:Init(buf, n + offset)
    return o
end
function shareT_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function shareT_mt:Pos()
    local o = self.view:Offset(4)
    if o ~= 0 then
        local x = o + self.view.pos
        local obj = require('common.Vec3').New()
        obj:Init(self.view.bytes, x)
        return obj
    end
end
function shareT_mt:Mana()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int16, o + self.view.pos)
    end
    return 150
end
function shareT.Start(builder) builder:StartObject(2) end
function shareT.AddPos(builder, pos) builder:PrependStructSlot(0, pos, 0) end
function shareT.AddMana(builder, mana) builder:PrependInt16Slot(1, mana, 150) end
function shareT.End(builder) return builder:EndObject() end

return shareT -- return the module