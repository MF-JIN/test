---
--- Generated by Luanalysis
--- Created by cn.
--- DateTime: 2021/2/1 3:06 PM
---

local CS = CS
local UnityEngine = CS.UnityEngine
local GameObject = UnityEngine.GameObject
local util = require "util"
local xutil = require "xlua.util"
local sqlite = require("lsqlite3")

local config = require("common.config.config")

if AppGlobal and AppGlobal.Data then return AppGlobal.Data end -- singleton

local this = {
    userdb = nil,
    datadb = nil,
}
local data = this
AppGlobal.Data = this

function data.initdb()
    local userdb = sqlite.open(config.userDbPath)
    local datadb = sqlite.open(config.dbCachePath)
    data.userdb = userdb
    data.datadb = datadb
end

---getdata
---@param stable string
---@param fields table
---@param filter string|nil
---@return table
local function get(db, stable, fields, filter)
    filter = filter or ""
    local t = {}
    local sql = string.format([[select %s from %s %s]]
    ,table.concat(fields, ","), stable, filter)
    for row in db:nrows(sql) do
        t[1+#t] = row
    end
    return t
end

local function update(db, strtab, records, filter)
    local keys , values= {}, {}
    for k, v in pairs(records) do
        keys[1+#keys] = k
        values[1+#values] = "'" .. v .. "'"
    end
    local sql = string.format([[update %s (%s) VALUES (%s) %s]]
        , strtab, table.concat(keys, ", "), table.concat(values, ","), filter)
    assert(sqlite.OK == db:exec(sql), db:errmsg())
end

function data.getdata( stable, fields, filter)
    return get(this.datadb, stable, fields, filter)
end
function data.getuser(stable, fields, filter)
    return get(this.userdb, stable, fields, filter)
end

function data.updateData(strtab, records, filter)
    update(this.datadb, strtab, records, filter)
end

function data.updateUser(strtab, records, filter)
    update(this.userdb, strtab, records, filter)
end

function data.getUserPoetry()
    
end

function data.Destroy()
    this.datadb:close()
    this.userdb:close()
end

return data